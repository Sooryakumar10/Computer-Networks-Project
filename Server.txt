import numpy as np
from tkinter import *
from socket import *
from time import *
from numpy import *
import tkinter.font as font
from tkinter import scrolledtext
ck=''
hk=''
window=Tk()
window.geometry('600x600')
window.title("SERVER")
myfont = font.Font(family='Lucidia Handwriting',size=15,weight='bold')
ke=Button(window, height=3, width=30, text="ENTER KEYS")
ke.pack()
ke['font']=myfont
T = scrolledtext.ScrolledText(window, width=90, height=5)
T.config(background='light grey', foreground='black', font='arial 12 bold', wrap='word', relief='sunken', bd=5)
chrs=[]
for i in range(65,91):
chrs.append(chr(i))
for i in range(97,123):
chrs.append(chr(i))
chrs.append(' ')
chrs.append('.')
chrs.append('\n')
chrs.append('@')
chrs.append(',')
chrs.append('$')
chrs.append('!')
def keygen(key):
import numpy
pos = key.find(':', key.find(':') + 1)
key = key[:pos] + ';' + key[pos + 1:]
key = key.replace(':', ' ')
key_m = numpy.array(numpy.matrix(key))
return key_m
from sympy import *
def dec(text,key):
key_m= keygen(key)
det= round(linalg.det(key_m) % 59)
print(det)
adj = list(Matrix(key_m).adjugate())
print(adj)
def inv_mod_p(x,p):
if x % p == 0:
raise ZeroDivisionError("Impossible inverse")
return pow(x, p - 2, p)
inv = inv_mod_p(det, 59)
print(inv)
adj = [(inv * i) %59 for i in adj]
print(adj)
import numpy
keyi = numpy.array(adj, dtype=int).reshape((2, 2))
print(keyi)
dec1= ''
i = 0
while i!=len(text):
temp=''
for s in text[i:i + 2:1]:
temp = temp + ';' + str(chrs.index(s))
temp = temp.lstrip(';')
cha = numpy.array(numpy.matrix(temp))
ans =numpy.dot(keyi,cha)
for j in ans:
dec1 = dec1 + chrs[(j[0] % 59)]
i=i+2
dec1= dec1.rstrip('X')
return dec1
hostl = gethostname()
portld = 5000
ldss = socket()
ldss.bind((hostl, portld))
ldss.listen(20)
dc, addr = ldss.accept()
def key_f(event):
v = StringVar()
cc=Entry(window,textvariable=v,width=40)
cc['font'] = myfont
v.set('Enter Key for Ceaser Cipher(1-25)')
v1=StringVar()
hc=Entry(window,textvariable=v1,width=60)
hc['font'] = myfont
v1.set('Enter key for Hill Cipher(2x2) in the format x:x:x:x each x from 1-25')
va = Button(window, height=3, width=30, text="VALIDATE")
va['font'] = myfont
ke.pack_forget()
cc.pack()
hc.pack()
va.pack()
window.update()
def valid_f(event):
global ck
global hk
ck=v.get()
hk=v1.get()
if ck.isdigit()==True:
if int(ck)>=1 and int(ck)<=25:
ck=int(ck)
v.set('Valid')
else:
v.set('Invalid Range')
else:
v.set('Invalid Type')
if len(hk.split(':')) == 4:
tem = keygen(hk)
det = round(linalg.det(tem) % 57)
if det == 0:
v1.set('Invalid Entry Determinent=0 enter values such that det non zero')
else:
te = hk.split(':')
c = 0
for i in te:
if i.isdigit() == True:
if int(i) >= 1 and int(i) <= 25:
c = c + 1
if c == 4:
v1.set('Valid')
else:
v1.set('Invalid Range/Type')
else:
v1.set('Invalid Entry')
if v.get()=='Valid' and v1.get()=='Valid':
cc.pack_forget()
hc.pack_forget()
va.pack_forget()
T.pack()
window.update()
while True:
print(ck,hk)
text=dc.recv(1024).decode()
sleep(2)
T.delete('1.0', END)
window.update()
if text == 'EXIT':
z = '\n\nRECEIVED MESSAGE=' + text
T.insert(END, z)
window.update()
T.yview(END)
sleep(3)
window.destroy()
break
z = '\n\nRECEIVED MESSAGE=' + text
T.insert(END, z)
window.update()
T.yview(END)
print(text)
text=dec(text,hk)
print(text)
z = '\n\nRECEIVED MESSAGE(AFTER HILL CIPHER DECTRYPTION)=' + text
T.insert(END, z)
window.update()
T.yview(END)
text1=''
print(type(ck))
for i in text:
if i == ' ' or i == '\n':
text1 += i
continue
if i.isupper()==True:
text1+= chr((ord(i)-ck-65) % 26 + 65)
else:
text1 += chr((ord(i) - ck - 97) % 26 + 97)
z = '\n\nORIGINAL TEXT=' +text1
T.insert(END, z)
window.update()
T.yview(END)
va.bind('<Button-1>',valid_f)
ke.bind('<Button-1>',key_f)
mainloop()